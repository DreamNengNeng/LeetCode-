https://leetcode.com/problems/copy-list-with-random-pointer/

/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/
// hashmap: key is the orginal node and value is the copied node
class Solution {
    public Node copyRandomList(Node head) {
        // <1, 1'> 
        // <3, 3'>
        //corner case 
        if (head == null) {
            return null;
        }
        //
        Node dummy = new Node(0);
        Node cur = dummy;
        Map<Node, Node> map = new HashMap<>();
        while (head != null) {
            if (!map.containsKey(head)) {
                map.put(head, new Node(head.val));
            }
            // connect the copied node to the deep copy list
            cur.next = map.get(head);
            // copy the random node if necessary
            if (head.random != null) {
                if (!map.containsKey(head.random)) {
                    map.put(head.random, new Node(head.random.val));
                }
                //connect the copied nodoe to the random pointer
                cur.next.random = map.get(head.random); 
            }
            head = head.next;
            cur = cur.next;
        }
        return dummy.next;
    }
}

//TC: O(n)
//SC: O(n) : 建立了hashMap
