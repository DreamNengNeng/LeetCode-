Find the height of binary tree.

Examples:

        5

      /    \

    3        8

  /   \        \

1      4        11

The height of above binary tree is 3.

How is the binary tree represented?

We use the level order traversal sequence with a special symbol "#" denoting the null node.

For Example:

The sequence [1, 2, 3, #, #, 4] represents the following binary tree:

    1

  /   \

 2     3

      /

    4                

                    

  * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public int findHeight(TreeNode root) { //the return type is int, the height of the tree
    //base case: null -> return 
    //subproblem: find the height of left subtree and the height of right subtree and compare and find the max : helper(root.left), helper(root.right)
    //recursion rule: max()
    int height = 0;
    int left = 0;
    int right = 0;
    if (root == null) {
      return height;
    }
    left = findHeight(root.left);
    right = findHeight(root.right);
    height = Math.max (left, right) + 1;
    return height;
  }
}

//TC: O(n)
//SC: O(height)
