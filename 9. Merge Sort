Given an array of integers, sort the elements in the array in ascending order. The merge sort algorithm should be used to solve this problem.

Examples

{1} is sorted to {1}
{1, 2, 3} is sorted to {1, 2, 3}
{3, 2, 1} is sorted to {1, 2, 3}
{4, 2, -3, 6, 1} is sorted to {-3, 1, 2, 4, 6}
Corner Cases

What if the given array is null? In this case, we do not need to do anything.
What if the given array is of length zero? In this case, we do not need to do anything.

public class Solution {
  public int[] mergeSort(int[] array) {
    // corner case
    if (array==null || array.length == 0) {
      return array;
    }
    return mergeSort(array, 0, array.length - 1);
  }
  private int[] mergeSort(int[] array, int left, int right) {
    //base case
    if (left == right) {
      return new int[]{array[left]};
    }
    //recursion rule
    int mid = left + (right-left)/2;
    int[] leftResult = mergeSort(array, left, mid);
    int[] rightResult = mergeSort(array, mid+ 1, right);
    return merge(leftResult, rightResult);

  }

  private int[] merge (int[] leftResult, int[] rightResult) {
    int[] result = new int[leftResult.length + rightResult.length];
    int i = 0;
    int j = 0;
    int k = 0;
    while (i < leftResult.length && j < rightResult.length) {
      if (leftResult[i] <= rightResult[j]) {
        result [k] = leftResult[i];
        i++;
      }
      else {
        result[k] = rightResult[j];
        j++;
      }
      k++;
    }
    while ( i == leftResult.length && j < rightResult.length) {
      result [k] = rightResult[j];
      k++;
      j++;
    }  

    while ( j == rightResult.length && i < leftResult.length)  {
      result [k] = leftResult [i];
      k++;
      i++;
    }
    return result;
    }
  }


