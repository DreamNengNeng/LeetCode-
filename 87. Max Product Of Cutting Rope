public class Solution {
   public int maxProduct (int n)  {
      //corner case
     if (n < 2) {
      return 0;
      }
     int M[ ] = new int M[n+1];
   
     M[1] = 0;
     for (int i = 2; i < n; i++) { // the meaning of i is the length of rope
       int curMax = 0;
       for ( int j = 1; j < i; j++) {
        curMax = Math.max(curMax, Math.max(j,M[j] )*       (i-j) )
      }  
    M[i] = curMax;
   }
   return M[n];
   }
}
           
---------------------------------------------------------------------------------------------------------------------------
if you are given i = 2
j = 1: curMax = 0

_     |      _
j=1     i-j = 2-1 = 1 : curMax = Math.max(1,0) = 1
Math.max(j, M[j]) = Math.max(1, 0) = 1

---------------------------------------------------------------------------------------------------------------------------
if you are given i = 3
j = 1: curMax1 = 1* 2 = 2
_ | _ _ 

j = 2: curMax2 = 1* 1* 1 = 1 

//O(n^2)
//SC: O(n)
