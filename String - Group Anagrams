https://leetcode.com/explore/interview/card/amazon/76/array-and-strings/2970/
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> groups = new HashMap<>(); // we will used the sorted String as the key, because "ate" "eat" after sorting all becomes "aet"
        List<List<String>> res = new ArrayList<>();
        for (String s : strs) {
           char[] chars = s.toCharArray();
           Arrays.sort(chars);
           String key = String.valueOf(chars);
           groups.putIfAbsent(key, new ArrayList<>());
           groups.get(key).add(s);
       }
        return new ArrayList<> (groups.values());
         
    }
}
//TC: O(N*K*logk) N is the length of input; K is the maximum length of the longest string in an array 


class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> groups = new HashMap<>(); // we will used the sorted String as the key, because "ate" "eat" after sorting all becomes "aet"
        
        for (String s : strs) {
           int[] count = new int[26]; // 26 个字母
           for (char c : s.toCharArray()) {
               count [c-'a']++;
           }
        StringBuilder sb = new StringBuilder;
            for (int i = 0; i < 26; i++) {
                sb.append(count[i]);
                sb.append('#');
            }
        
           String key = sb.toString();
           groups.putIfAbsent(key, new ArrayList<>());
           groups.get(key).add(s);
       }
        return new ArrayList<> (groups.values());
         
    }
}

//TC: O(N*K + N *A) // A is the length of count
//SC: O(N*K + N * A)
