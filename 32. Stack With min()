Enhance the stack implementation to support min() operation. min() should return the current minimum value in the stack. If the stack is empty, min() should return -1.

push(int element) - push the element to top
pop() - return the top element and remove it, if the stack is empty, return -1
top() - return the top element without remove it, if the stack is empty, return -1
min() - return the current min value in the stack.

public class Solution {
  private Deque<Integer> stack;
  private Deque<Integer> minStack;

  public Solution() {
    stack = new LinkedList<>();
    minStack = new LinkedList<>();
  }
  
  public int pop() {
    if (stack.isEmpty()) {
      return -1;
    }
  Integer result = stack.pollFirst();
  // when the popped value is the same as top value of minStack, the value need to be popped from minStack as well
  if (minStack.peekFirst().equals(result)) {
    minStack.pollFirst();
  }
  return result;
}
  
  public void push(int element) {
    stack.offerFirst(element);
    if (minStack.isEmpty() || element <= minStack.peekFirst()) {
      minStack.offerFirst(element);
    }
    
  }
  
  public int top() {
    if (stack.isEmpty()) {
      return -1;
    }
    return stack.peekFirst();
  }
  
  public int min() {
    if(minStack.isEmpty()) {
      return -1;
    }
    return minStack.peekFirst();
  }
}
