Java: Implement a queue by using two stacks. The queue should provide size(), isEmpty(), offer(), poll() and peek() operations. When the queue is empty, poll() and peek() should return null.

C++: Implement a queue by using two stacks. The queue should provide size(), isEmpty(), push(), front() and pop() operations. When the queue is empty, front() should return -1.

Assumptions

The elements in the queue are all Integers.
size() should return the number of elements buffered in the queue.
isEmpty() should return true if there is no element buffered in the queue, false otherwise.

public class Solution {
  // we always insert into the in stack
  private LinkedList<Integer> in;
  // we always remove from the out stack
  private LinkedList<Integer> out;

  public Solution() {
    in = new LinkedList<>();
    out = new LinkedList<>();
  }
  
  public Integer poll() {
    //if out stack is empty, need to move the elements from in stack to out stack
    move();
    return out.isEmpty()? null : out.pollFirst();
  }
  
  public void offer(int element) {
    in.offerFirst(element);
  }
  
  public Integer peek() {
    move();
    return out.isEmpty()?  null : out.peekFirst();
  }
  private void move() { // when out stack is empty, move the elements from in stack to out stack 
    if (out.isEmpty()) {
      while (!in.isEmpty()) {
        out.offerFirst(in.pollFirst());
      }
    }
  }
  public int size() {
    return in.size() + out.size();
  }
  
  public boolean isEmpty() {
    return in.size() == 0 && out.size()==0;
  }
}
