https://leetcode.com/problems/binary-tree-level-order-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> levels = new ArrayList<>();
    public void helper (TreeNode node, int level) {
        //start the current level
        if (levels.size() == level) {
            levels.add(new ArrayList<Integer>());
        }
        // fulfil the current level
        levels.get(level).add(node.val);
        if (node.left != null) {
            helper(node.left, level + 1);
        }
        if (node.right != null) {
            helper(node.right, level + 1);
        }
    }
    public List<List<Integer>> levelOrder(TreeNode root) {
        if (root == null) {
            return levels;
        }
        helper(root, 0);
        return levels;
        
    }
}

//TC: O(n)
//SC: O(n) : recursion



Solution2[Iterative]

public List<List<Integer>> levelOrder(Treenode root) {
      List<List<Integer>> result = new ArrayList<>();
      Queue<TreeNode> q = new LinkedList<>();
      if (root == null) {
          return result;
      }
      q.offer(root);
      
      while (! q.isEmpty()) {
         int size = q.size();
         
         List<Integer> currLevel = new ArrayList<>();
         while (size --> 0 ) {
             TreeNode curr = q.poll();
             currLevel.add(curr.val);
             if (curr.left != null) {
                 q.offer(curr.left);
             }
             if (curr.right != null) {
                 q.offer(curr.right);
             }
        
           }
           result.add(currLevel);
      }
      return result;
}
