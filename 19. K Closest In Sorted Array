Given a target integer T, a non-negative integer K and an integer array A sorted in ascending order, find the K closest numbers to T in A. If there is a tie, the smaller elements are always preferred.

Assumptions

A is not null
K is guranteed to be >= 0 and K is guranteed to be <= A.length
Return

A size K integer array containing the K closest numbers(not indices) in A, sorted in ascending order by the difference between the number and T. 
Examples

A = {1, 2, 3}, T = 2, K = 3, return {2, 1, 3} or {2, 3, 1}
A = {1, 4, 6, 8}, T = 3, K = 3, return {4, 1, 6}

public class Solution {
  public int[] kClosest(int[] array, int target, int k) {
    //corner case
    if (array == null || array.length ==0 ) {
      return array;
    }
    if (k == 0) {
      return new int[0];
    }
    int[] solution = new int[k]; //假设： k 的range [1,array.length-1]
    int left = largestSmallerEqual(array, target) ;
    int right = left + 1; 

    for (int i = 0; i<k; i++) {
      if (right >= array.length ) {
        solution[i]= array[left--];
      } 
      else if (left>=0 && target - array[left] <= array[right]- target) {
        solution[i]= array[left--];
      }
      else {solution[i]= array[right++];
      }
    }
     return solution;
    }
    public int largestSmallerEqual(int[] array, int target) {
        int left = 0;
        int right = array.length - 1;
        while (left < right - 1) {
          int mid = left + (right - left) /2;
          if (array[mid] <= target) {
            left = mid;
          }
          else { right = mid;}
        }

        //post processing: 只剩两个元素的时候
        if ( array[right] <= target) {
          return right;
        }
        if (array[left] <= target) {
          return left;
        }
        else {return -1;}
    
    }

  }

   
//TC:
//SC:



