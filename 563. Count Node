Find the number of tree nodes.



Examples:

        5

      /    \

    3        8

  /   \        \

1      4        11

The number of above binary tree is 6.

/**
 * public class TreeNode {
 *   public int key;
 *   public TreeNode left;
 *   public TreeNode right;
 *   public TreeNode(int key) {
 *     this.key = key;
 *   }
 * }
 */
public class Solution {
  public int countNodes(TreeNode root) {
    int count = 0;
    int countLeft = 0;
    int countRight = 0;
    //base case
    if (root == null) {
      return count;
    }
    //subproblem: find the count of left subTree and right of subtree
    //recursion rule
    countLeft = countNodes(root.left);
    countRight = countNodes(root.right);
    count = countLeft + countRight + 1; //1 is for root
    return count;
  }
}
//TC: O(n)
//SC: O(height): average: O(log2 n) worst: O(n)
