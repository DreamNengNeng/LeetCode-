Given a linked list, check whether it is a palindrome.

Examples:

Input:   1 -> 2 -> 3 -> 2 -> 1 -> null

output: true.

Input:   1 -> 2 -> 3 -> null  

output: false.

Requirements:

Space complexity must be O(1)

/**
 * class ListNode {
 *   public int value;
 *   public ListNode next;
 *   public ListNode(int value) {
 *     this.value = value;
 *     next = null;
 *   }
 * }
 */
public class Solution {
  public boolean isPalindrome(ListNode head) {
    //corner case
    if (head == null) {
      return true;
    }
    //thought: we need to find the middle node in this list
    ListNode middle = findMiddle(head); 
    ListNode right = reverseLinkedList(middle.next);
    while (right != null) {
      if (head.value != right.value) {
        return false;
      }
      head = head.next;
      right = right.next;
    }
    return true;

  }
  public ListNode findMiddle(ListNode head){
    if (head == null) {
      return null;
    }
    ListNode slow = head;
    ListNode fast = head;
    while (fast.next != null && fast.next.next != null) {
      slow = slow.next;
      fast = fast.next.next;
    }
    return slow;
  }
  public ListNode reverseLinkedList(ListNode head) {
    ListNode prev = null;
    while (head != null) {
      ListNode next = head.next;
      head.next = prev;
      prev = head;
      head = next;
    }
    return prev;
  }

}
