https://leetcode.com/explore/interview/card/amazon/76/array-and-strings/2967/
class Solution {
    public int threeSumClosest(int[] nums, int target) {
        int diff = Integer.MAX_VALUE;
        int len = nums.length;
        Arrays.sort(nums);
        for (int i = 0; i < len && diff != 0 ; i++) {
            int lo = i + 1;
            int hi = len - 1;
            while (lo < hi) {
                int sum = nums[i] + nums[lo] + nums[hi];
                if (Math.abs(diff) > Math.abs(target - sum)) {
                    diff = target - sum; 
                }
                if (sum < target) {
                  lo++;
                 }
                else {
                  hi--;
                }
                
           }   
         
        }
         return target - diff;
    }
}      
//TC: O(n^2) : we have outer and inner loops and each going thru n elements. sorting is O(nlog n)
//SC: O(log n) to O(n) depending on the implementation of the sorting algorithm
