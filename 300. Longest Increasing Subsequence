https://leetcode.com/problems/longest-increasing-subsequence/
class Solution {
    public int lengthOfLIS(int[] nums) {
        //corner case
        if (nums == null || nums.length == 0) {
            return 0;
        }
        
        int[] dp = new int[nums.length];
        int result = 1;

        
        //dp[i] represents the length of the logest increasing subsequence that ends with ith element
        for (int i = 0; i< nums.length; i++) {
            dp[i] = 1;
            for (int j = 0; j < i; j++) {
              if (nums[i] > nums[j]) {
                 dp[i] = Math.max(dp[i], dp[j] + 1);
            }
          }
          result = Math.max(result, dp[i]);
        } 
        return result;
    }
}


//TC: O(n^2)
//SC: O(n) 
